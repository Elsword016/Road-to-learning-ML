{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "MNIST handwriting recognition",
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "8xVaMR93oVME",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import tensorflow as tf\n",
        "import keras\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from keras.utils import np_utils"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QAcyQZLQpAvx",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        },
        "outputId": "157d2975-1000-4fcf-baf8-63f72da8e675"
      },
      "source": [
        "(X_train,y_train),(X_test,y_test) = keras.datasets.mnist.load_data()\n",
        "\n",
        "X_train = np.expand_dims(X_train,axis=-1)\n",
        "X_test = np.expand_dims(X_test,axis=-1)\n",
        "print(X_train.shape)\n",
        "print(y_test.shape)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(60000, 28, 28, 1)\n",
            "(10000,)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EOcalUR6pKfO",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        },
        "outputId": "a305524b-1649-4232-b5de-5689a1e30825"
      },
      "source": [
        "#data preprocessing\n",
        "X_train2 = X_train.astype('float32')/255.0\n",
        "X_test2 = X_test.astype('float32')/255.0\n",
        "print('Train shape',X_train2.shape)\n",
        "print('Test shape',X_test2.shape)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Train shape (60000, 28, 28, 1)\n",
            "Test shape (10000, 28, 28, 1)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9luaMr44qltx",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        },
        "outputId": "88da03d4-2b66-42d1-cd4b-1849dd363b72"
      },
      "source": [
        "y_train2 = keras.utils.to_categorical(y_train,num_classes=10,dtype='float32')\n",
        "y_test2 = keras.utils.to_categorical(y_test,num_classes=10,dtype='float32')\n",
        "print(y_train2.shape)\n",
        "print(y_test2.shape)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(60000, 10)\n",
            "(10000, 10)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "A-x_oG7SsbH8",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 357
        },
        "outputId": "f718bb77-9ad0-4989-cca0-81d1b80f12b2"
      },
      "source": [
        "#model\n",
        "model = keras.models.Sequential()\n",
        "model.add(keras.layers.Conv2D(32,(3,3),padding='same',activation='relu',input_shape=(28,28,1),))\n",
        "model.add(keras.layers.Conv2D(32,(3,3),padding='same',activation='relu'))\n",
        "model.add(keras.layers.MaxPool2D(pool_size=(2,2),strides=None,padding='valid'))\n",
        "model.add(keras.layers.Flatten())\n",
        "model.add(keras.layers.Dense(64,activation='relu'))\n",
        "model.add(keras.layers.Dense(10,activation='softmax'))\n",
        "model.summary()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential_3\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "conv2d_5 (Conv2D)            (None, 28, 28, 32)        320       \n",
            "_________________________________________________________________\n",
            "conv2d_6 (Conv2D)            (None, 28, 28, 32)        9248      \n",
            "_________________________________________________________________\n",
            "max_pooling2d_3 (MaxPooling2 (None, 14, 14, 32)        0         \n",
            "_________________________________________________________________\n",
            "flatten_3 (Flatten)          (None, 6272)              0         \n",
            "_________________________________________________________________\n",
            "dense_5 (Dense)              (None, 64)                401472    \n",
            "_________________________________________________________________\n",
            "dense_6 (Dense)              (None, 10)                650       \n",
            "=================================================================\n",
            "Total params: 411,690\n",
            "Trainable params: 411,690\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3kO-ueHRuGP_",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 374
        },
        "outputId": "7bb24f7c-c336-43df-888e-f286d3570c01"
      },
      "source": [
        "f = open('result.txt','w')\n",
        "model.compile(optimizer='adam',loss = 'categorical_crossentropy',metrics=['accuracy'])\n",
        "res=model.fit(X_train2,y_train2,epochs=10,validation_data=(X_test2,y_test2))\n",
        "print(res, file=f)\n",
        "f.close()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Train on 60000 samples, validate on 10000 samples\n",
            "Epoch 1/10\n",
            "60000/60000 [==============================] - 131s 2ms/step - loss: 0.0131 - accuracy: 0.9958 - val_loss: 0.0443 - val_accuracy: 0.9877\n",
            "Epoch 2/10\n",
            "60000/60000 [==============================] - 130s 2ms/step - loss: 0.0089 - accuracy: 0.9972 - val_loss: 0.0366 - val_accuracy: 0.9908\n",
            "Epoch 3/10\n",
            "60000/60000 [==============================] - 131s 2ms/step - loss: 0.0079 - accuracy: 0.9975 - val_loss: 0.0356 - val_accuracy: 0.9909\n",
            "Epoch 4/10\n",
            "60000/60000 [==============================] - 136s 2ms/step - loss: 0.0067 - accuracy: 0.9976 - val_loss: 0.0391 - val_accuracy: 0.9914\n",
            "Epoch 5/10\n",
            "60000/60000 [==============================] - 135s 2ms/step - loss: 0.0049 - accuracy: 0.9985 - val_loss: 0.0594 - val_accuracy: 0.9872\n",
            "Epoch 6/10\n",
            "60000/60000 [==============================] - 135s 2ms/step - loss: 0.0050 - accuracy: 0.9983 - val_loss: 0.0576 - val_accuracy: 0.9877\n",
            "Epoch 7/10\n",
            "60000/60000 [==============================] - 134s 2ms/step - loss: 0.0052 - accuracy: 0.9983 - val_loss: 0.0671 - val_accuracy: 0.9878\n",
            "Epoch 8/10\n",
            "60000/60000 [==============================] - 131s 2ms/step - loss: 0.0041 - accuracy: 0.9986 - val_loss: 0.0629 - val_accuracy: 0.9874\n",
            "Epoch 9/10\n",
            "60000/60000 [==============================] - 132s 2ms/step - loss: 0.0035 - accuracy: 0.9987 - val_loss: 0.0523 - val_accuracy: 0.9907\n",
            "Epoch 10/10\n",
            "60000/60000 [==============================] - 131s 2ms/step - loss: 0.0042 - accuracy: 0.9985 - val_loss: 0.0719 - val_accuracy: 0.9869\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "etd9sqQRue6V",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 68
        },
        "outputId": "47f48bb5-f6bd-4a4a-ee99-4d044f309031"
      },
      "source": [
        "test_loss,test_acc = model.evaluate(X_test2,y_test2,verbose=1)\n",
        "print(\"Loss on test data\",test_loss)\n",
        "print(\"Accuracy on test data\",test_acc)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "10000/10000 [==============================] - 5s 513us/step\n",
            "Loss on test data 0.07185629092621683\n",
            "Accuracy on test data 0.9868999719619751\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "B5oKOAhQAiPL",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "outputId": "01e4bca7-dfc6-4381-c762-32450a114a24"
      },
      "source": [
        "predict = model.predict(X_test2)\n",
        "print(np.argmax(predict[900]))\n",
        "plt.imshow(X_test2[900].reshape(28,28),cmap='gray')\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "1\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ubISJHB4EC_4",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "ceba38d7-3baf-40cc-afaf-ebc7af00326d"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "2\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VdBpMH8XENP1",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}
